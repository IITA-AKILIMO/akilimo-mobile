pipeline {
  agent any
  stages {
    stage('Starting up the pipeline') {
      steps {
        sh 'printenv | sort'
      }
    }

    stage('Execute python script') {
      steps {
        sh 'curl -L https://raw.githubusercontent.com/masgeek/py-github/develop/get-tag-raw.py -o latest-tag.py'
        sh 'pip install python-env'
        sh 'python latest-tag.py'
      }
    }

    stage('Run test for non release branch') {
      when {
        beforeAgent true
        not {
          branch 'master'
        }

      }
      environment {
        PRE_RELEASE = 'YES'
        RELEASE_VERSION = sh(script: 'cat $LATEST_TAG_FILE', , returnStdout: true).trim()
      }
      steps {
        sh 'gradle testDebug -x lint'
      }
    }

    stage('Run linting for develop branch only') {
      when {
        beforeAgent true
        anyOf {
          branch 'develop'
        }

      }
      steps {
        sh 'gradle :app:lintDebug -x test'
        androidLint(pattern: '**/lint-results*.xml')
      }
    }

    stage('Generate beta AAB') {
      when {
        beforeAgent true
        anyOf {
          branch 'develop'
        }

      }
      environment {
        PRE_RELEASE = 'YES'
        RELEASE_VERSION = sh(script: 'cat $LATEST_TAG_FILE', , returnStdout: true).trim()
      }
      steps {
        sh 'gradle bundleRelease -x test --no-daemon'
      }
    }

    stage('Generate beta APK') {
      when {
        beforeAgent true
        anyOf {
          branch 'develop'
        }

      }
      environment {
        PRE_RELEASE = 'YES'
        RELEASE_VERSION = sh(script: 'cat $LATEST_TAG_FILE', , returnStdout: true).trim()
      }
      steps {
        sh 'gradle assembleRelease -x test --no-daemon'
      }
    }

    stage('Generate production APK') {
      when {
        beforeAgent true
        anyOf {
          branch 'master'
        }

      }
      environment {
        RELEASE_VERSION = sh(script: 'cat $LATEST_TAG_FILE', , returnStdout: true).trim()
      }
      steps {
        sh 'gradle assembleRelease -x test --no-daemon'
      }
    }

    stage('Generate production AAB') {
      when {
        beforeAgent true
        anyOf {
          branch 'master'
        }

      }
      environment {
        RELEASE_VERSION = sh(script: 'cat $LATEST_TAG_FILE', , returnStdout: true).trim()
      }
      steps {
        sh 'gradle bundleRelease -x test --no-daemon'
      }
    }

   stage('Sign production binaries') {
   stages {
        stage('Sign APK') {
          agent any
          when {
            beforeAgent true
            anyOf {
              branch 'develop'
              branch 'master'
            }
          }
          steps {
            signAndroidApks(apksToSign: 'app/build/outputs/**/*/*-unsigned.apk', archiveSignedApks: true, keyAlias: 'akilimo', keyStoreId: 'akilimo', skipZipalign: true)
          }
        }

        stage('Sign AAB') {
          when {
            beforeAgent true
            anyOf {
              branch 'develop'
              branch 'master'
            }

          }
          steps {
            echo 'Signing Android bundles'
            withCredentials(bindings: [usernamePassword(credentialsId: 'keystore-credentials', passwordVariable: 'pass', usernameVariable: 'alias')]) {
              sh 'jarsigner -keystore $KEYSTORE_FILE -storepass $pass app/build/outputs/**/*/*-release.aab $alias'
            }

          }
        }
        }
    }
    stage('Archive Artifacts') {
      when {
        beforeAgent true
        anyOf {
          branch 'develop'
          branch 'master'
        }

      }
      steps {
        script {
          archiveArtifacts allowEmptyArchive: true,
          artifacts: '**/*.apk, **/*.aab, app/build/**/mapping/**/*.txt, app/build/**/logs/**/*.txt'
        }

      }
    }

    stage('Upload AAB to beta track') {
      when {
        beforeAgent true
        beforeInput true
        beforeOptions true
        branch 'develop'
      }
      options {
        timeout(activity: true, time: 2, unit: 'HOURS')
      }
      input {
        message 'Publish to beta channel'
        id 'YES'
      }
      steps {
        androidApkUpload(filesPattern: '**/build/outputs/**/*-release.aab', googleCredentialsId: 'akilimoservice-account', recentChangeList: [[language: 'en-GB',
                                                                                     text: '''This update includes:
                                   - New content
                                   - New features
                                   - Bug fixes
                                   - Performance improvements''']], trackName: 'beta')
      }
    }

    stage('Upload APK to production track') {
      when {
        beforeAgent true
        branch 'master'
      }
      steps {
        androidApkUpload(filesPattern: '**/build/outputs/**/*-release.apk', googleCredentialsId: 'akilimoservice-account', recentChangeList: [[language: 'en-GB',
                                                                                     text: '''This update includes:
                                   - New content
                                   - New features
                                   - Bug fixes
                                   - Performance improvements''']], trackName: 'production')
      }
    }

    stage('Upload pre-release build artifacts') {
      when {
        beforeAgent true
        anyOf {
          branch 'develop'
        }

      }
      environment {
        RELEASE_VERSION = sh(script: 'cat $TAG_FILE', , returnStdout: true).trim()
      }
      steps {
        sh 'cp app/build/outputs/**/*.* uploads/'
        sh 'cp app/build/outputs/**/*/*.* uploads/'
        sh 'ghr -replace -prerelease $RELEASE_VERSION uploads/'
      }
    }

    stage('Upload production build artifacts') {
      when {
        beforeAgent true
        anyOf {
          branch 'master'
        }

      }
      environment {
        RELEASE_VERSION = sh(script: 'cat $TAG_FILE', , returnStdout: true).trim()
      }
      steps {
        sh 'cp app/build/outputs/**/*.* uploads/'
        sh 'cp app/build/outputs/**/*/*.* uploads/'
        sh 'ghr -replace $RELEASE_VERSION uploads/'
      }
    }

    stage('Fingerprint files') {
      when {
        beforeAgent true
        anyOf {
          branch 'develop'
          branch 'master'
        }

      }
      steps {
        fingerprint '**/build/outputs/**/*-release.*'
      }
    }

    stage('clean WS') {
      steps {
        cleanWs()
      }
    }
  }
  environment {
    KEYSTORE_FILE = 'D:\\gdrive\\keystores\\fertilizer.jks'
    LATEST_TAG_FILE = 'latest_tag_file.txt'
    TAG_FILE = 'nextrelease.txt'
    REPO_NAME = 'masgeek/akilimo-mobile'
  }
}
