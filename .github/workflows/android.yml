name: Android Builder

on:
  push:
    paths-ignore:
      - '**.md'
      - '**.txt'
      - '**.sh'
      - '**.xml'
      - 'docs/**'
      - '.github/ISSUE_TEMPLATE/**'
  workflow_dispatch:

jobs:

  unit-test:
    if: github.ref == 'refs/heads/main'
    runs-on: ubuntu-latest
    concurrency:
      group: ci-${{ github.head_ref || github.ref_name }}
      cancel-in-progress: true

    env:
      GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      REPO_NAME: ${{ secrets.REPO_NAME }}
      LATEST_TAG_FILE: "latest_tag.txt"
      RELEASE_VERSION: ${{ secrets.GITHUB_RUN_ID }}
      VERSION_CODE: ${{ secrets.GITHUB_RUN_ID }}
      MAPBOX_DOWNLOADS_TOKEN: ${{ secrets.MAPBOX_DOWNLOADS_TOKEN }}
    steps:
      - name: Checkout the code
        uses: actions/checkout@v4

      - name: Set up JDK
        uses: actions/setup-java@v4
        with:
          distribution: 'temurin'
          java-version: 21

      - name: Get build version
        run: |
          VERSION_CODE=$(curl -s https://munywele.co.ke/app-releases/akilimo)
          echo "VERSION_CODE=$VERSION_CODE" >> $GITHUB_ENV

      - name: Make gradlew executable
        run: chmod +x ./gradlew

      # Enhanced Gradle caching for unit tests
      - name: Setup Gradle
        uses: gradle/actions/setup-gradle@v3
        with:
          cache-read-only: false

      - name: Run Unit tests
        run: ./gradlew testDebugUnitTest
        continue-on-error: false

      - name: Report
        uses: FlickerSoul/android-test-report-actions@v1.2
        if: ${{ always() }}

      - name: Make Unit test report
        uses: asadmansr/android-test-report-action@v1.2.0
        if: ${{ always() }}

  build_artifacts:
    #if: github.ref == 'refs/heads/main'
    #    needs: unit-test
    name: Build artifacts
    runs-on: ubuntu-latest
    env:
      GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      REPO_NAME: ${{ secrets.REPO_NAME }}
      VERSION_CODE: ${{ secrets.GITHUB_RUN_ID }}
      LATEST_TAG_FILE: "latest_tag.txt"
      RELEASE_VERSION: ${{ secrets.GITHUB_RUN_ID }}
      MAPBOX_DOWNLOADS_TOKEN: ${{ secrets.MAPBOX_DOWNLOADS_TOKEN }}
      PACKAGE_NAME: ${{ secrets.APP_PACKAGE }}
    steps:
      - name: Checkout the code
        uses: actions/checkout@v4

      - name: Set up JDK
        uses: actions/setup-java@v4
        with:
          distribution: 'temurin'
          java-version: 21

      - name: Get and set name of current branch
        run: echo "BRANCH_NAME=${GITHUB_REF##*/}" >> $GITHUB_ENV

      - name: Display current branch name
        run: echo ${BRANCH_NAME}

      - name: Get build version
        run: |
          VERSION_CODE=$(curl -s https://munywele.co.ke/app-releases/akilimo)
          echo "VERSION_CODE=$VERSION_CODE" >> $GITHUB_ENV

      - name: Set up Python 3.9
        uses: actions/setup-python@v5
        with:
          python-version: '3.9'

      - name: Install Poetry
        run: curl -sSL https://install.python-poetry.org | python3 -

      - name: Download pyproject.toml
        run: curl -L https://raw.githubusercontent.com/masgeek/py-github/develop/pyproject.toml -o pyproject.toml

      - name: Download Tag fetching script
        run: curl -L https://raw.githubusercontent.com/masgeek/py-github/develop/fetch-tags.py -o latest-tag.py

      - name: Install dependencies with Poetry
        run: poetry install --no-root

      - name: Fetch latest tag
        run: poetry run python latest-tag.py

      - name: Update release version
        run: echo "RELEASE_VERSION=$(cat $LATEST_TAG_FILE)" >> $GITHUB_ENV

      - name: Setup Android SDK
        uses: android-actions/setup-android@v3

      - name: Make gradlew executable
        run: chmod +x ./gradlew

      # Cache final APK & AAB outputs with more specific key
      - name: Cache APK & AAB outputs
        uses: actions/cache@v4
        with:
          path: |
            app/build/outputs/apk/release/app-release-unsigned.apk
            app/build/outputs/bundle/release/app-release.aab
          key: build-artifacts-${{ runner.os }}-${{ env.VERSION_CODE }}-${{ hashFiles('**/*.gradle*', '**/gradle.properties', 'app/src/main/**/*.kt', 'app/src/main/**/*.java', 'app/src/main/res/**', 'app/src/main/AndroidManifest.xml', 'app/proguard-rules.pro') }}
          restore-keys: |
            build-artifacts-${{ runner.os }}-${{ env.VERSION_CODE }}-
            build-artifacts-${{ runner.os }}-

      # Check if cached artifacts exist and are valid
      - name: Check cached artifacts
        id: check_cache
        run: |
          if [ -f "app/build/outputs/apk/release/app-release-unsigned.apk" ] && [ -f "app/build/outputs/bundle/release/app-release.aab" ]; then
            echo "cached_artifacts_exist=true" >> $GITHUB_OUTPUT
            echo "✅ Found cached APK and AAB artifacts"
            ls -la app/build/outputs/apk/release/app-release-unsigned.apk
            ls -la app/build/outputs/bundle/release/app-release.aab
          else
            echo "cached_artifacts_exist=false" >> $GITHUB_OUTPUT
            echo "❌ Cached artifacts not found, will build from scratch"
          fi

      # Only build if cached artifacts don't exist or are invalid
      - name: Generate android AAB and APK
        if: steps.check_cache.outputs.cached_artifacts_exist != 'true'
        run: |
          echo "🔨 Building APK and AAB from source..."
          ./gradlew bundleRelease assembleRelease -x test

      # Verify build outputs exist
      - name: Verify build outputs
        run: |
          if [ ! -f "app/build/outputs/apk/release/app-release-unsigned.apk" ]; then
            echo "❌ APK not found after build!"
            exit 1
          fi
          if [ ! -f "app/build/outputs/bundle/release/app-release.aab" ]; then
            echo "❌ AAB not found after build!"
            exit 1
          fi
          echo "✅ Build artifacts verified"
          echo "APK size: $(du -h app/build/outputs/apk/release/app-release-unsigned.apk | cut -f1)"
          echo "AAB size: $(du -h app/build/outputs/bundle/release/app-release.aab | cut -f1)"

      - name: Create release folder
        run: mkdir -p $GITHUB_WORKSPACE/release

      - name: Reverse JKS file
        run: echo "${{ secrets.KEYSTORE_FILE }}" | base64 -d > $GITHUB_WORKSPACE/akilimo.jks

      - name: Sign AAB
        uses: ilharp/sign-android-release@v2
        # ID used to access action output
        id: sign_aab
        with:
          releaseDir: app/build/outputs/bundle/release
          signingKey: ${{ secrets.KEYSTORE_FILE }}
          keyAlias: ${{ secrets.KEY_ALIAS }}
          keyStorePassword: ${{ secrets.KEYSTORE_PASSWORD }}
          keyPassword: ${{ secrets.KEY_PASSWORD }}
          buildToolsVersion: 36.0.0

      - name: Sign APK
        uses: ilharp/sign-android-release@v2
        id: sign_apk
        with:
          releaseDir: app/build/outputs/apk/release
          signingKey: ${{ secrets.KEYSTORE_FILE }}
          keyAlias: ${{ secrets.KEY_ALIAS }}
          keyStorePassword: ${{ secrets.KEYSTORE_PASSWORD }}
          keyPassword: ${{ secrets.KEY_PASSWORD }}
          buildToolsVersion: 36.0.0

      - name: Ensure release folder exists
        run: mkdir -p release

      - name: Copy and rename signed APK and AAB
        run: |
          # Rename APK
          for file in ${{ steps.sign_apk.outputs.signedFiles }}; do
            cp "$file" "release/akilimo-release.apk"
          done

          # Rename AAB
          for file in ${{ steps.sign_aab.outputs.signedFiles }}; do
            cp "$file" "release/akilimo-release.aab"
          done

      - name: Copy release tag file
        run: cp $LATEST_TAG_FILE release

      - name: Install git-chglog
        run: |
          curl -sSL https://github.com/git-chglog/git-chglog/releases/latest/download/git-chglog_$(uname -s)_$(uname -m).tar.gz | tar -xz
          sudo mv git-chglog /usr/local/bin/

      - name: Generate CHANGELOG.md
        run: |
          git fetch --tags --force
          git-chglog -o CHANGELOG.md

      - name: Generate release notes
        run: python .github/scripts/generate_release_notes.py

      - name: Copy release notes
        run: cp -r distribution release

      - uses: actions/upload-artifact@v4.6.0
        name: Upload artifact
        with:
          name: app-release
          if-no-files-found: error
          overwrite: true
          path: release

  publish_to_playstore:
    if: github.ref == 'refs/heads/main'
    needs: build_artifacts
    name: Publish to Google PlayStore (Beta)
    runs-on: ubuntu-latest
    steps:
      - uses: actions/download-artifact@v4.1.7
        name: Retrieve artifacts
        with:
          name: app-release
          path: release

      - name: Upload to Google Play Beta track
        uses: r0adkll/upload-google-play@v1
        with:
          serviceAccountJsonPlainText: ${{ secrets.GOOGLE_SERVICE_ACCOUNT }}
          packageName: ${{ secrets.APP_PACKAGE }}
          releaseFiles: release/*.aab
          track: beta
          status: completed
          whatsNewDirectory: release/distribution/whatsnew

      - name: Update build number
        run: curl -s https://munywele.co.ke/app-releases/akilimo/update

  upload_beta_release:
    #    if: success() && github.ref == 'refs/heads/main'
    #    needs: publish_to_playstore
    needs: build_artifacts
    name: Upload to GitHub Beta Release
    runs-on: ubuntu-latest
    env:
      LATEST_TAG_FILE: "latest_tag.txt"
      GHR_REPLACE: "1"
      GHR_PATH: release
      GHR_PRERELEASE: "1"
      GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

    steps:
      - uses: actions/download-artifact@v4.1.7
        name: Retrieve artifacts
        with:
          name: app-release
          path: release

      - run: |
          cp release/distribution/whatsnew/* release
          rm -rf release/distribution
          ls release

      - name: Read latest tag from tag file
        run: echo "GHR_TAG=$(cat release/$LATEST_TAG_FILE)-beta" >> $GITHUB_ENV

      - name: Upload release artifacts
        uses: masgeek/github-action-ghr@v1.3.2